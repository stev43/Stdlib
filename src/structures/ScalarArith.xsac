module ScalarArith;

export all;

#include "Templates.mac"

/** <!--********************************************************************-->
 *
 * @fn  <a> zero( <a>[*] Array)
 *
 *   @brief  yields a scalar zero of the element type of its argument.
 *
 ******************************************************************************/

#define ZERO( sactype, postfix, zval, oval, ctype) \
inline                                             \
sactype zero( sactype[*] A)                        \
{                                                  \
  return( zval);                                   \
}

BUILT_IN( ZERO)

/** <!--********************************************************************-->
 *
 * @fn  <a> one( <a>[*] Array)
 *
 *   @brief  yields a scalar one of the element type of its argument.
 *
 ******************************************************************************/

#define ONE( sactype, postfix, zval, oval, ctype) \
inline                                            \
sactype one( sactype[*] A)                        \
{                                                 \
  return( oval);                                  \
}

BUILT_IN( ONE)


/** <!--********************************************************************-->
 *
 * Macros for encapsulating binary and monary prfs:
 * Calls of these are created when using the macros provided in "Templates.mac"
 * such as MAP_ARI_OPS, MAP_INT_OPS, MAP_REL_OPS...
 *
 ******************************************************************************/

#define MAP_BIN_SxS( name, op, a, b)  \
inline                                \
b name(a A, a B)                      \
{                                     \
  return( op( A, B));                 \
}

#define MAP_MON_SxS( name, op, a, b)  \
inline                                \
b name(a A)                           \
{                                     \
  return( op( A));                    \
}

#define MAP_UNA_S( name, op, a, b)    \
inline                                \
a name(a A)                           \
{                                     \
  return op (A, one (A));             \
}


/** <!--********************************************************************-->
 *
 * AriOPS on scalars (see Templates.mac for details)
 *
 ******************************************************************************/

#define ARI_OPS_S( sactype, postfix, zval, oval, ctype) \
MAP_ARI_OPS( SxS, sactype)

NUM(  ARI_OPS_S)

//------------------------------------------------------------------------------

#define ABS_OP_S( sactype, postfix, zval, oval, ctype) \
MAP_ABS_OP( SxS, sactype)

#define ABS_NOOP_S( sactype, postfix, zval, oval, ctype) \
MAP_ABS_NOOP( SxS, sactype)

/* _abs_ works on all numbers but is noop on unsigned ones */
SIGNED_NUM(  ABS_OP_S)
UNSIGNED_INT_NUM(  ABS_NOOP_S)

//------------------------------------------------------------------------------

#define NEG_OP_S( sactype, postfix, zval, oval, ctype) \
MAP_NEG_OP( SxS, sactype)

/* _neg_ only works on signed integers and reals */
SIGNED_NUM(  NEG_OP_S)

//------------------------------------------------------------------------------

#define ANA_OPS_S( sactype, postfix, zval, oval, ctype) \
MAP_ANA_OPS( S, sactype)

NUM(   ANA_OPS_S)

//------------------------------------------------------------------------------

#define INT_OPS_S( sactype, postfix, zval, oval, ctype) \
MAP_INT_OPS( SxS, sactype)

/* _mod_SxS_ only supports whole numbers */
INT_NUM(  INT_OPS_S)

/** <!--********************************************************************-->
 *
 * RelOPS on scalars (see Templates.mac for details)
 *
 ******************************************************************************/

#define REL_OPS_S( sactype, postfix, zero, one, ctype) \
MAP_REL_OPS( SxS, sactype)

BUILT_IN(  REL_OPS_S)


/** <!--********************************************************************-->
 *
 * LogOPS on scalars (see Templates.mac for details)
 *
 ******************************************************************************/

MAP_LOG_OPS( SxS)


/** <!--********************************************************************-->
 *
 * ConvOPS on scalars (see Templates.mac for details)
 *
 ******************************************************************************/

#define BOOL_CONV_OP_S(  sactype, postfix, zero, one, ctype) \
MAP_BOOL_CONV_OP( SxS, sactype)
NUM( BOOL_CONV_OP_S)
BOOL( BOOL_CONV_OP_S)

#define NUM_CONV_OPS_S( sactype, postfix, zero, one, ctype) \
MAP_NUM_CONV_OPS( SxS, sactype)

BUILT_IN( NUM_CONV_OPS_S)

