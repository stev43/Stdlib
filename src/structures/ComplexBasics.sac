module ComplexBasics;

export all;

use ArrayBasics: { sel};
use Math:  { atan2};

typedef double[2] complex;


/*  Functions for composing and decomposing of complex numbers.  */


inline double real(complex CPX)
{
  return(((double[2])CPX)[[0]]);
}


inline double imag(complex CPX)
{
  return(((double[2])CPX)[[1]]);
}

/*  
 *  Simple conversion functions between complex, real and integer
 *  numbers.
 */


inline  complex toc(int    REAL, int    IMAG)
{
  return((complex)[ScalarArith::tod(REAL), ScalarArith::tod(IMAG)]);
}


inline  complex toc(float8  REAL, float8  IMAG)
{
  return((complex)[ScalarArith::tod(REAL), ScalarArith::tod(IMAG)]);
}


inline  complex toc(float16  REAL, float16  IMAG)
{
  return((complex)[ScalarArith::tod(REAL), ScalarArith::tod(IMAG)]);
}


inline  complex toc(float  REAL, float  IMAG)
{
  return((complex)[ScalarArith::tod(REAL), ScalarArith::tod(IMAG)]);
}


inline  complex toc(double REAL, double IMAG)
{
  return((complex)[REAL, IMAG]);
}


inline complex toc(double[2] COMP) 
{
  return((complex)COMP);

}


inline  complex toc(int    REAL)
{
  return((complex)[ScalarArith::tod(REAL), 0.0d]);
}


inline  complex toc(float8  REAL)
{
  return((complex)[ScalarArith::tod(REAL), 0.0d]);
}


inline  complex toc(float16  REAL)
{
  return((complex)[ScalarArith::tod(REAL), 0.0d]);
}


inline  complex toc(float  REAL)
{
  return((complex)[ScalarArith::tod(REAL), 0.0d]);
}


inline complex toc(double REAL)
{
  return((complex)[REAL, 0.0d]);
}




/* Extract real and imag part from a complex number. */

inline  int,    int    toi(complex C)
{
  return(ScalarArith::toi(real(C)), ScalarArith::toi(imag(C)));
}


inline  float , float  tof(complex C)
{
  return(ScalarArith::tof(real(C)), ScalarArith::tof(imag(C)));
}


inline  double, double tod(complex C)
{
  return(real(C), imag(C));
}

inline  double[2] todv(complex C)
{
  return([real(C), imag(C)]);
}

inline String::string tos(complex c)
{
  real, imag = tod(c);
  str = String::sprintf("%f + %fi\n", real, imag);
  return(str);
}

inline int, int ptoi(complex C)
{
  r,t = ptof(C);
  return(ScalarArith::toi(r), ScalarArith::toi(t));
}

inline float, float ptof(complex C)
{
  x,y = tof(C);
  return(Math::sqrt(ScalarArith::tof(norm(C))), Math::atan2(x,y));
}

inline double, double ptod(complex C)
{
  return(Math::sqrt(norm(C)), Math::atan2(real(C),imag(C)));
}



  /*  Functions for composing and decomposing of complex numbers
      using polar coordinates.  */


inline complex polar(double MAG, double ANGLE)
{
  return((complex)[MAG ScalarArith::* Math::cos(ANGLE), MAG ScalarArith::* Math::sin(ANGLE)]);
}

    
inline complex polar(double MAG)
{
  return((complex)[MAG, 0.0d]);
}

    
inline double normSq(complex CPX)
{
  return(  ((double[2])CPX)[[0]] ScalarArith::* ((double[2])CPX)[[0]] 
         ScalarArith::+ ((double[2])CPX)[[1]] ScalarArith::* ((double[2])CPX)[[1]]);
}

inline double norm( complex CPX)
{
  return( Math::sqrt( normSq( CPX)));
}

inline double arg(complex CPX)
{
  return(atan2(((double[2])CPX)[[0]], ((double[2])CPX)[[1]]));
}



/*  Complex constants.  */


inline complex i()
{
  return( toc( 0,1));
}

inline complex zero()
{
  return( toc( 0,0));
}

inline complex zero( complex[*] a)
{
  /* Provided for compatibility with UDT macro mechanism */
  return( toc( 0,0));
}

inline complex one()
{
  return( toc( 1,0));
}

inline complex one( complex[*] a)
{
  /* Provided for compatibility with UDT macro mechanism */
  return( toc( 1,0));
}


