module ArrayTransform;

use ArrayBasics: {shape,sel, genarray};
use ArrayArith: {<,==,>,&,|,abs,zero,+,-,*,min,max};
import Constants: all;

export all;

#include "Templates.mac"


/******************************************************************************
 *
 * Helper functions
 *
 ******************************************************************************/
inline 
int Min( int x, int y)
{ /* Function to perform min_SxS_( x, y), but written to 
   * let the optimizers simplify the arguments.
   */

  z = _min_SxS_( x, y);
  return(z);
}

inline 
int[.] Min( int[.] x, int[.] y)
{ /* Function to perform min_VxV_( x, y), but written to 
   * let the optimizers simplify the arguments.
   */

  z = _min_VxV_( x, y);
  return(z);
}

inline 
int Max( int x, int y)
{ /* Function to perform max_SxS_( x, y), but written to 
   * let the optimizers simplify the arguments.
   */

  z = _max_SxS_( x, y);
  return(z);
}

inline 
int[.] Max( int[.] x, int y)
{ /* Function to perform max_VxS_( x, y), but written to 
   * let the optimizers simplify the arguments.
   */

  z = _max_VxS_( x, y);
  return(z);
}

inline
int NormalizeRotateCount( int count, int max_rotate)
{
  /* Normalizer for rotate count */
  z = _aplmod_SxS_( count, max_rotate);
  return( z);
}

inline
int signum( int y)
{
  if( _eq_SxS_( 0, y)) {
    z = 0;
  } else {
    if( _lt_SxS_( 0, y)) {
      z = 1;
    } else {
      z = _sub_SxS_( 0, 1);
    }
  }
  return( z);
} 

/********************************************************************************
 *
 * Structural OPS
 *
 ********************************************************************************/

// Take supports overtake. 
// E.g., take([5], [2, 3]) -->     
//     [2, 3, 0, 0, 0]
//
// Take supports short v, padding the missing elements with 
// corresponding elements from shape(array).
// E.g., take([3], genarray([2,2], 42)) -->
//     42 42
//     42 42
//      0  0

#define TAKE( sactype, postfix, zval, oval, ctype)                               \
inline                                                                           \
sactype[+] take( int[.] v, sactype[+] array)                                     \
{                                                                                \
  shpa = _shape_A_( array);                                                      \
  zr = _mul_VxS_( shpa, 0);                                                      \
  ylb = zr;                                                                      \
  lb = zr;                                                                       \
  vext = shpa;                                                                   \
                                                                                 \
  /* Pad take count for Bernecky's extended take */                              \
  /* See APL model in function Take in apex test suite UTTakeDrop */             \
  /* for-loop should get unrolled */                                             \
  for( i=0; _lt_SxS_( i, _sel_VxA_( [0], _shape_A_( v))); i= _add_SxS_( i, 1)) { \
    vel = _sel_VxA_( [i], v);                                                    \
    shpel = _sel_VxA_( [i], shpa);                                               \
    vext  = _idx_modarray_AxSxS_( vext,  i,  vel);                               \
    val = _sub_SxS_(0, vel);                                                     \
    val = _sub_SxS_( val, shpel);                                                \
    val = _max_SxS_( val, 0);                                                    \
    val = _mask_SxSxS_( _ge_SxS_( vel, 0), 0, val);                              \
    lb = _idx_modarray_AxSxS_( lb, i, val);                                      \
    val = _max_SxS_( 0, _add_SxS_( shpel, vel));                                 \
    val = _mask_SxSxS_( _ge_SxS_( vel, 0), 0, val);                              \
    ylb = _idx_modarray_AxSxS_( ylb, i, val);                                    \
  }                                                                              \
  shpz = _abs_V_( vext);                                                         \
  ub = _min_VxV_( shpa, shpz);                                                   \
  ub = _add_VxV_( ub, lb);                                                       \
  res = with {                                                                   \
          ( lb <= iv < ub ) :                                                    \
              _sel_VxA_( _add_VxV_(                                              \
                           _sub_VxV_( ylb, lb), iv), array);                     \
        } : genarray( shpz, zval);                                               \
  return( res);                                                                  \
}

BUILT_IN( TAKE)

/*----------------------------------------------------------------------------*/

#define DROP( sactype, postfix, zval, oval, ctype)                               \
inline                                                                           \
sactype[*] drop( int[.] v, sactype[*] array)                                     \
{                                                                                \
  shpa = _shape_A_( array);                                                      \
  zr = _mul_VxS_( shpa, 0);                                                      \
  offset = zr;                                                                   \
  /* Pad drop count */                                                           \
  vext = zr;                                                                     \
  for( i=0; _lt_SxS_( i, _sel_VxA_( [0], _shape_A_( v))); i= _add_SxS_( i, 1)) { \
    el     = _sel_VxA_( [i], v);                                                 \
    shpel  = _sel_VxA_( [i], shpa);                                              \
    vext   = _idx_modarray_AxSxS_( vext,  i,  el);                               \
    val    = _mask_SxSxS_( _le_SxS_( el, 0), 0, _min_SxS_( shpel, el));          \
    offset = _idx_modarray_AxSxS_( offset, i, val);                              \
  }                                                                              \
  shpz = _max_VxV_( zr,_sub_VxV_( shpa, _abs_V_( vext)));                        \
  res = with {                                                                   \
          ( . <= iv <= . ) : _sel_VxA_( _add_VxV_( offset, iv), array);          \
        } : genarray( shpz, zval);                                               \
  return( res);                                                                  \
}

BUILT_IN( DROP)


/*----------------------------------------------------------------------------*/

#define TILE( sactype, postfix, zval, oval, ctype)                        \
inline                                                                    \
sactype[*] tile( int[.] shp, int[.] idx, sactype[*] array)                \
{                                                                         \
  res = with {                                                            \
          ( . <= iv <= . ) : _sel_VxA_( _add_VxV_( idx, iv), array);      \
        } : genarray( shp, zval);                                         \
  return( res);                                                           \
}

BUILT_IN( TILE)

/*----------------------------------------------------------------------------*/

/* First axis catenation */
#define CAT( sactype, postfix, zval, oval, ctype)                           \
inline                                                                      \
sactype[+] ++( sactype[+] arr_a, sactype[+] arr_b)                          \
{ /* Array-Array catenate, first axis */                                    \
  new_shp = _idx_modarray_AxSxS_( _shape_A_( arr_a), 0,                     \
                        _add_SxS_( _sel_VxA_([0], _shape_A_( arr_a)),       \
                                   _sel_VxA_([0], _shape_A_( arr_b)) ) );   \
  res = with {                                                              \
          ( . <= iv < _shape_A_(arr_a) ) : _sel_VxA_( iv, arr_a);           \
        } : genarray( new_shp, zval);                                       \
  offset =  _idx_modarray_AxSxS_( _mul_SxV_( 0, new_shp), 0,                \
                        _sel_VxA_([0], _shape_A_( arr_a)) );                \
  res = with {                                                              \
          ( offset <= iv <= . ) : _sel_VxA_( _sub_VxV_( iv, offset), arr_b);\
        } : modarray( res );                                                \
  return( res);                                                             \
}                                                                           \
                                                                            \
inline                                                                      \
sactype[+] ++( sactype[+] arr_a, sactype arr_b)                             \
{  /* Array-Scalar catenate, first axis */                                  \
  new_shp = _idx_modarray_AxSxS_( _shape_A_( arr_a), 0,                     \
                        _add_SxS_( _sel_VxA_([0], _shape_A_( arr_a)), 1));  \
  res = with {                                                              \
          ( . <= iv < _shape_A_(arr_a) ) : _sel_VxA_( iv, arr_a);           \
        } : genarray( new_shp, zval);                                       \
  offset =  _idx_modarray_AxSxS_( _mul_SxV_( 0, new_shp), 0,                \
                        _sel_VxA_([0], _shape_A_( arr_a)) );                \
  res = with {                                                              \
          ( offset <= iv <= . ) : arr_b;                                    \
        } : modarray( res );                                                \
  return( res);                                                             \
}                                                                           \
                                                                            \
inline                                                                      \
sactype[+] ++( sactype arr_a, sactype[+] arr_b)                             \
{ /* Scalar-Array catenate, first axis */                                   \
  new_shp = _idx_modarray_AxSxS_( _shape_A_( arr_b), 0,                     \
              _add_SxS_( 1, _sel_VxA_([0], _shape_A_( arr_b))));            \
  res = with {                                                              \
          ( . <= iv < _shape_A_(arr_b) ) : _sel_VxA_( iv, arr_b);           \
        } : genarray( new_shp, zval);                                       \
  offset =  _idx_modarray_AxSxS_( _mul_SxV_( 0, new_shp), 0,                \
                        _sel_VxA_([0], _shape_A_( arr_b)) );                \
  res = with {                                                              \
          ( offset <= iv <= . ) : arr_a;                                    \
        } : modarray( res );                                                \
  return( res);                                                             \
}                                                                           \
                                                                            \
inline                                                                      \
sactype[+] ++( sactype arr_a, sactype arr_b)                                \
{ /* Scalar-Scalar catenate, first axis  */                                 \
  res = [arr_a, arr_b];                                                     \
  return( res);                                                             \
}                                                                           \

BUILT_IN( CAT)

// Last-axis catenate
// We assume that x and y are the same shape, except 
// perhaps along the last axis.

#define CATENATE( sactype, postfix, zval, oval, ctype)                      \
inline                                                                      \
sactype[+] catenate( sactype[+] x, sactype[+] y)                            \
{ /* Array-Array catenate, last axis */                                     \
  axis = _dim_A_( x) - 1;                                                   \
  colsx = _shape_A_(x) [ axis];                                             \
  colsy = _shape_A_(y) [ axis];                                             \
  shpz = _idx_modarray_AxSxS_( _shape_A_( x), axis, colsx + colsy);         \
  offset = _mul_SxV_( 0, _shape_A_( x));                                    \
  offset = _idx_modarray_AxSxS_( offset, axis, colsx);                      \
  z = with {                                                                \
       ( 0 *_shape_A_(x) <= iv < _shape_A_( x)) : x[ iv];                   \
     } : genarray(shpz, zval);                                              \
  z = with {                                                                \
       ( offset <= iv < shpz) : y[ iv - offset];                            \
     } : modarray( z);                                                      \
                                                                            \
 return( z);                                                                \
}                                                                           \
                                                                            \
inline                                                                      \
sactype[+] catenate( sactype[+] x, sactype y)                               \
{ /* Array-Scalar catenate, last axis */                                    \
  axis = _dim_A_( x) - 1;                                                   \
  colsx = _shape_A_(x) [ axis];                                             \
  colsy = 1;                                                                \
  shpz = _idx_modarray_AxSxS_( _shape_A_( x), axis, colsx + colsy);         \
  offset = _mul_SxV_( 0, _shape_A_( x));                                    \
  offset = _idx_modarray_AxSxS_( offset, axis, colsx);                      \
  z = with {                                                                \
       ( 0 *_shape_A_(x) <= iv < _shape_A_( x)) : x[ iv];                   \
     } : genarray(shpz, zval);                                              \
  z = with {                                                                \
       ( offset <= iv < shpz) : y;                                          \
     } : modarray( z);                                                      \
                                                                            \
 return( z);                                                                \
}                                                                           \
                                                                            \
inline                                                                      \
sactype[+] catenate( sactype x, sactype[+] y)                               \
{ /* Scalar-Array catenate, last axis  */                                   \
  axis = _dim_A_( y) - 1;                                                   \
  colsx = 1;                                                                \
  colsy = _shape_A_(y) [ axis];                                             \
  shpz = _idx_modarray_AxSxS_( _shape_A_( y), axis, colsx + colsy);         \
  offset = _mul_SxV_( 0, _shape_A_( y));                                    \
  offset = _idx_modarray_AxSxS_( offset, axis, colsx);                      \
  z = with {                                                                \
       ( offset <= iv < shpz) : y[ iv - offset];                            \
     } : genarray(shpz, zval);                                              \
  z = with {                                                                \
       ( 0 *_shape_A_(y) <= iv < offset) : x;                               \
     } : modarray( z);                                                      \
                                                                            \
 return( z);                                                                \
}                                                                           \
                                                                            \
inline                                                                      \
sactype[+] catenate( sactype x, sactype y)                                  \
{ /* Scalar-Scalar catenate, last axis */                                   \
  z = [x, y];                                                               \
  return( z);                                                               \
}                                                                           \


BUILT_IN( CATENATE)

/*----------------------------------------------------------------------------*/

/* First axis reverse */

#define REVERSE( sactype, postfix, zval, oval, ctype)                       \
inline                                                                      \
sactype[+] reverse( sactype[+] arr_a)                                       \
{                                                                           \
  maxidx0 = _sub_SxS_( _sel_VxA_( [0], _shape_A_( arr_a)), 1);              \
  res = with {                                                              \
          ( [0] <= iv = [i] <= [maxidx0] ) : arr_a[[_sub_SxS_(maxidx0, i)]];\
        } : modarray( arr_a );                                              \
  return( res);                                                             \
}

BUILT_IN( REVERSE)

/* Reverse on specified axis: 0 is leading axis, dim-1 is trailing axis */

#define REVERSEAXIS( sactype, postfix, zval, oval, ctype)                   \
inline                                                                      \
sactype[+] reverse( int axis, sactype[+] arr_a)                             \
{                                                                           \
  shp = _shape_A_( arr_a);                                                  \
  zer = _mul_VxS_( shp, 0);                                                 \
  shpel = _sel_VxA_( [ axis], shp);                                         \
  offset = _sub_SxS_( shpel, 1);                                            \
  z = with {                                                                \
         ( zer <= iv < shp) {                                               \
            ivel = _sel_VxA_( [ axis], iv);                                 \
            idx = _modarray_AxVxS_( iv, [ axis], _sub_SxS_( offset, ivel)); \
         }  : _sel_VxA_( idx, arr_a);                                       \
       } : modarray( arr_a);                                                \
  return( z);                                                               \
}

BUILT_IN( REVERSEAXIS)

/*----------------------------------------------------------------------------*/

#define TRANSPOSE( sactype, postfix, zval, oval, ctype)                     \
inline                                                                      \
sactype[+] transpose( sactype[+] arr_a)                                     \
{                                                                           \
  res = with {                                                              \
          ( . <= iv <= . ) : arr_a[ reverse( iv)];                          \
        } : genarray( reverse( _shape_A_( arr_a)), zval);                   \
  return( res);                                                             \
}

BUILT_IN( TRANSPOSE)


/*----------------------------------------------------------------------------*/
// Positive shift is to right, negative to left 
#define SHIFT_S( sactype, postfix, zval, oval, ctype)                       \
inline                                                                      \
sactype[+] shift (int dimension, int count, sactype boundary, sactype[+] A) \
{ shpa = _shape_A_( A);                                                     \
  max_shift = _sel_VxA_( [dimension], shpa);                                \
  zr = _mul_SxV_( 0, shpa);                                                 \
  s = signum(count);                                                        \
  cnonneg = _ge_SxS_( count, 0);                                            \
  cneg = _not_S_( cnonneg);                                                 \
  cnonneg = _toi_S_( cnonneg);                                              \
  cneg = _toi_S_( cneg);                                                    \
                                                                            \
  /* Prevent overshift */                                                   \
  abscount = _abs_S_( count);                                               \
  count = _min_SxS_( abscount, max_shift);                                  \
  count = _mul_SxS_( s, count);                                             \
                                                                            \
  lb = _modarray_AxVxS_( zr, [dimension], _mul_SxS_( count, cnonneg));      \
  offset = _modarray_AxVxS_( zr, [dimension], _neg_S_( count));             \
  ubel = _sel_VxA_( [dimension], shpa);                                     \
  ubel = _sub_SxS_( ubel, _mul_SxS_( abscount, cneg));                      \
  ub = _modarray_AxVxS_( shpa, [dimension], ubel);                          \
                                                                            \
  result = with {                                                           \
              ( lb <= iv < ub ) : _sel_VxA_( _add_VxV_( iv, offset), A);    \
           } : genarray( _shape_A_(A), boundary );                          \
                                                                            \
  return(result);                                                           \
}

#define SHIFT_V( sactype, postfix, zval, oval, ctype)              \
inline                                                             \
sactype[+] shift (int[.] counts, sactype boundary, sactype[+] A)   \
{                                                                  \
                                                                   \
  for( i=0; i <shape(counts)[0]; i=i +1) {                         \
    offset = counts[[i]];                                          \
    A = shift( i, offset, boundary, A);                            \
  }                                                                \
                                                                   \
  return(A);                                                       \
}

#define SHIFT_V_Z( sactype, postfix, zval, oval, ctype) \
inline                                                  \
sactype[+] shift (int[.] counts, sactype[+] A)          \
{                                                       \
  return( shift ( counts, zval, A));                    \
}


#define SHIFT( sactype, postfix, zval, oval, ctype)  \
SHIFT_S( sactype, postfix, zval, oval, ctype)        \
SHIFT_V( sactype, postfix, zval, oval, ctype)        \
SHIFT_V_Z( sactype, postfix, zval, oval, ctype)

BUILT_IN( SHIFT)

/*----------------------------------------------------------------------------*/

/*
 * rotate: allows arbitrary count.
 *
 * count>0 rotates elements toward the right, e.g.,
 *
 *   rotate([ 2], iota( 5))
 * 3 4 0 1 2
 *
 */

#define ROTATE_S( sactype, postfix, zval, oval, ctype)                 \
inline                                                                 \
sactype[+] rotate (int dimension, int count, sactype[+] A)             \
{                                                                      \
                                                                       \
  max_rotate = _sel_VxA_( [dimension], _shape_A_(A));                  \
  count = NormalizeRotateCount( count, max_rotate);                    \
                                                                       \
  offset = _modarray_AxVxS_( _mul_SxV_( 0, _shape_A_(A)),              \
                            [dimension], count);                       \
  slice_shp = _modarray_AxVxS_(_shape_A_(A), [dimension], count);      \
                                                                       \
  result = with {                                                      \
             ( offset <= iv <= . ) : _sel_VxA_(iv-offset, A);          \
           } : modarray( A );                                          \
  result = with {                                                      \
             ( . <= iv < slice_shp )                                   \
             : _sel_VxA_(_shape_A_(A)-slice_shp+iv, A);                \
           } : modarray( result );                                     \
  return(result);                                                      \
}                                                                      \


/* The definition of ROTATE_V is poor: it will never WLF/AWLF on
 * arrays of rank>2, because maxlur = 2, by default.
 *
 * Better just to use compositions of rotates, I think, but
 * if you're keen, then use -maxlur 42 or something like that.
 *
 */

#define ROTATE_V( sactype, postfix, zval, oval, ctype)             \
inline                                                             \
sactype[+] rotate (int[.] counts,  sactype[+] A)                   \
{                                                                  \
  int offset;                                                      \
                                                                   \
  for( i=0; i <shape(counts)[0]; i=i +1) {                         \
    offset = counts[[i]];                                          \
    A = rotate( i, offset, A);                                     \
  }                                                                \
                                                                   \
  return(A);                                                       \
}

#define ROTATE( sactype, postfix, zval, oval, ctype)  \
ROTATE_S( sactype, postfix, zval, oval, ctype)        \
ROTATE_V( sactype, postfix, zval, oval, ctype)

BUILT_IN( ROTATE)


/********************************************************************************
 *
 * Others
 *
 ********************************************************************************/

#define WHERE_AxA( sactype, postfix, zval, oval, ctype)  \
inline                                                   \
sactype[*] where( bool[*] p, sactype[*] A, sactype[*] B) \
{                                                        \
  res = with {                                           \
          ( . <= iv <= . )                               \
          {                                              \
            if ( _sel_VxA_( iv, p)) {                    \
              val = _sel_VxA_( iv, A);                   \
            } else {                                     \
              val = _sel_VxA_( iv, B);                   \
            }                                            \
          } : val;                                       \
        } : genarray( _shape_A_(p), zval);               \
                                                         \
  return( res);                                          \
}

#define WHERE_AxS( sactype, postfix, zval, oval, ctype)  \
inline                                                   \
sactype[*] where( bool[*] p, sactype[+] A, sactype B)    \
{                                                        \
  res = with {                                           \
          ( . <= iv <= . )                               \
          {                                              \
            if ( _sel_VxA_( iv, p)) {                    \
              val = _sel_VxA_( iv, A);                   \
            } else {                                     \
              val = B;                                   \
            }                                            \
          } : val;                                       \
        } : genarray( _shape_A_(p), zval);               \
                                                         \
  return( res);                                          \
}

#define WHERE_SxA( sactype, postfix, zval, oval, ctype)  \
inline                                                   \
sactype[*] where( bool[*] p, sactype A, sactype[+] B)    \
{                                                        \
  res = with {                                           \
          ( . <= iv <= . )                               \
          {                                              \
            if ( _sel_VxA_( iv, p)) {                    \
              val = A;                                   \
            } else {                                     \
              val = _sel_VxA_( iv, B);                   \
            }                                            \
          } : val;                                       \
        } : genarray( _shape_A_(p), zval);               \
                                                         \
  return( res);                                          \
}

#define WHERE_SxS( sactype, postfix, zval, oval, ctype)  \
inline                                                   \
sactype[*] where( bool[*] p, sactype A, asctype B)       \
{                                                        \
  res = with {                                           \
          ( . <= iv <= . )                               \
          {                                              \
            if ( _sel_VxA_( iv, p)) {                    \
              val = A;                                   \
            } else {                                     \
              val = B;                                   \
            }                                            \
          } : val;                                       \
        } : genarray( _shape_A_(p), zval);               \
                                                         \
  return( res);                                          \
}

#define WHERE( sactype, postfix, zval, oval, ctype)        \
WHERE_AxA( sactype, postfix, zval, oval, ctype)            \
WHERE_AxS( sactype, postfix, zval, oval, ctype)            \
WHERE_SxA( sactype, postfix, zval, oval, ctype)            \
WHERE_SxS( sactype, postfix, zval, oval, ctype)

BUILT_IN( WHERE)

#define REDUCE( name, type, fun, neutral)                           \
inline                                                              \
type name( type[*] arr_a)                                           \
{                                                                   \
  res = with {                                                      \
          ( _mul_SxV_(0,_shape_A_(arr_a)) <= iv < _shape_A_(arr_a) )\
          : _sel_VxA_(iv, arr_a);                                   \
        } : fold( fun, neutral );                                   \
                                                                    \
  return( res);                                                     \
}

#define SUM( sactype, postfix, zval, oval, ctype) REDUCE( sum, type, +, zval)
#define PROD( sactype, postfix, zval, oval, ctype) REDUCE( prod, type, *, oval)
#define ALL REDUCE( all, bool, &, true)
#define ANY REDUCE( any, bool, |, false)
#define MAXVAL( sactype, postfix, zval, oval, ctype) REDUCE( maxval, type, max, min##type())
#define MINVAL( sactype, postfix, zval, oval, ctype) REDUCE( minval, type, min, max##type())

NUM( SUM)
NUM( PROD)
NUM( MAXVAL)
NUM( MINVAL)

ALL
ANY

/* The match verb */ 
#define MATCH( sactype, postfix, zval, oval, ctype)                     \
inline						                                                      \
bool match( sactype arr_a, sactype arr_b)		                            \
{						                                                            \
 return( arr_a == arr_b);			                                          \
}									                                                      \
									                                                      \
inline						                                                      \
bool match( sactype[+] arr_a, type arr_b)					                      \
{									                                                      \
 return(false);								                                          \
}									                                                      \
									                                                      \
inline									                                                \
bool match( type arr_a, type[+] arr_b)					                        \
{									                                                      \
 return( false);							                                          \
}									                                                      \
									                                                      \
inline									                                                \
bool match( type[+] arr_a, type[+] arr_b)					                      \
{									                                                      \
 if ((_dim_A_( arr_a) == _dim_A_( arr_b)) && 				                    \
	(all(_eq_VxV_(_shape_A_(arr_a), _shape_A_(arr_b))))){		              \
         res = with {							                                      \
          ( _mul_SxV_(0,_shape_A_( arr_a)) <= iv < _shape_A_( arr_a) )  \
          : _eq_SxS_(_sel_VxA_(iv, arr_a), _sel_VxA_(iv, arr_b)) ;  	  \
          } : foldfix( &, true, false );                               	\
 } else {								                                                \
	res = false;							                                            \
   }									                                                  \
 return( res);								                                          \
}									

BUILT_IN( MATCH)


/********************************************************************************
 *
 * mask() has the same semantics as where(), but it does not use WLs.
 * 
 * These versions are defined on scalars/vectors only, but they could
 * be extended to higher-order arrays via a WL.
 *
 * Unlike where(), they compute both legs of the "conditional",
 * which may be a feature or a bug, depending on your point of view.
 *
 ********************************************************************************/

#define MASK_SxSxS( sactype, postfix, zval, oval, ctype)                  \
inline                                                                    \
sactype mask( bool p, sactype A, sactype B)                               \
{                                                                         \
  res = _mask_SxSxS_( p, A, B);                                           \
  return( res);                                                           \
}                                                                         \

#define MASK_SxSxV( sactype, postfix, zval, oval, ctype)                  \
inline                                                                    \
sactype[.] mask( bool p, sactype A, sactype[.] B)                         \
{                                                                         \
  res = _mask_SxSxV_( p, A, B);                                           \
  return( res);                                                           \
}                                                                         \

#define MASK_SxVxS( sactype, postfix, zval, oval, ctype)                  \
inline                                                                    \
sactype[.] mask( bool p, sactype[.] A, sactype B)                         \
{                                                                         \
  res = _mask_SxVxS_( p, A, B);                                           \
  return( res);                                                           \
}                                                                         \

#define MASK_SxVxV( sactype, postfix, zval, oval, ctype)                  \
inline                                                                    \
sactype[.] mask( bool p, sactype[.] A, sactype[.] B)                      \
{                                                                         \
  res = _mask_SxVxV_( p, A, B);                                           \
  return( res);                                                           \
}                                                                         \

#define MASK_VxSxS( sactype, postfix, zval, oval)                         \
inline                                                                    \
sactype[.] mask( bool[.] p, sactype A, sactype B)                         \
{                                                                         \
  res = _mask_VxSxS_( p, A, B);                                           \
  return( res);                                                           \
}                                                                         \

#define MASK_VxSxV( sactype, postfix, zval, oval, ctype)                  \
inline                                                                    \
sactype[.] mask( bool[.] p, sactype A, sactype[.] B)                      \
{                                                                         \
  res = _mask_VxSxV_( p, A, B);                                           \
  return( res);                                                           \
}                                                                         \

#define MASK_VxVxS( sactype, postfix, zval, oval)                         \
inline                                                                    \
sactype[.] mask( bool[.] p, sactype[.] A, sactype B)                      \
{                                                                         \
  res = _mask_VxVxS_( p, A, B);                                           \
  return( res);                                                           \
}                                                                         \

#define MASK_VxVxV( sactype, postfix, zval, oval, ctype)                  \
inline                                                                    \
sactype[.] mask( bool[.] p, sactype[.] A, sactype[.] B)                   \
{                                                                         \
  res = _mask_VxVxV_( p, A, B);                                           \
  return( res);                                                           \
}                                                                         \

#define MASK( sactype, postfix, zval, oval, ctype)                            \
MASK_SxSxS( sactype, postfix, zval, oval, ctype)                              \
MASK_SxSxV( sactype, postfix, zval, oval, ctype)                              \
MASK_SxVxS( sactype, postfix, zval, oval, ctype)                              \
MASK_SxVxV( sactype, postfix, zval, oval, ctype)                              \
MASK_VxSxV( sactype, postfix, zval, oval, ctype)                              \
MASK_VxVxS( sactype, postfix, zval, oval, ctype)                              \
MASK_VxVxV( sactype, postfix, zval, oval, ctype)                              \

/* MASK_VxSxS( a) FIXME in ct_prf.c */

BUILT_IN( MASK)
