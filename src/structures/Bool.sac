/*****************************************************************************
 *
 * file:   Bool.sac
 *
 * prefix: ---
 *
 * description:
 *
 *   This module implementation is part of the SAC standard library.
 *
 *   It implements some primitives on boolean arguments that are not
 *   hard-wired into the compiler.
 *
 *
 *****************************************************************************/

module Bool;

export all;


/*
 *  Type conversion operations.
 */

inline int toi( bool b)
{
  if( b) {
    res = 1;
  } else {
    res = 0;
  }
  return( res);
}

inline bool to_bool( bool i){
  return( i);
}

inline bool to_bool( byte i)
{ 
 if ( _eq_SxS_(1b,i) )
	res = true;
 else if ( _eq_SxS_(0b,i))
	res = false;
 else
	res = false; /* Should be domain error!! */
 return( res);
}

inline bool to_bool( short i)
{ 
 if ( _eq_SxS_(1s,i) )
	res = true;
 else if ( _eq_SxS_(0s,i))
	res = false;
 else
	res = false; /* Should be domain error!! */
 return( res);
}

inline bool to_bool( int i)
{ 
 if ( _eq_SxS_(1,i) )
	res = true;
 else if ( _eq_SxS_(0,i))
	res = false;
 else
	res = false; /* Should be domain error!! */
 return( res);
}

inline bool to_bool( long i)
{ 
 if ( _eq_SxS_(1l,i) )
	res = true;
 else if ( _eq_SxS_(0l,i))
	res = false;
 else
	res = false; /* Should be domain error!! */
 return( res);
}

inline bool to_bool( longlong i)
{ 
 if ( _eq_SxS_(1ll,i) )
	res = true;
 else if ( _eq_SxS_(0ll,i))
	res = false;
 else
	res = false; /* Should be domain error!! */
 return( res);
}

inline bool to_bool( ubyte i)
{ 
 if ( _eq_SxS_(1ub,i) )
	res = true;
 else if ( _eq_SxS_(0ub,i))
	res = false;
 else
	res = false; /* Should be domain error!! */
 return( res);
}

inline bool to_bool( ushort i)
{ 
 if ( _eq_SxS_(1us,i) )
	res = true;
 else if ( _eq_SxS_(0us,i))
	res = false;
 else
	res = false; /* Should be domain error!! */
 return( res);
}

inline bool to_bool( uint i)
{ 
 if ( _eq_SxS_(1ui,i) )
	res = true;
 else if ( _eq_SxS_(0ui,i))
	res = false;
 else
	res = false; /* Should be domain error!! */
 return( res);
}

inline bool to_bool( ulong i)
{ 
 if ( _eq_SxS_(1ul,i) )
	res = true;
 else if ( _eq_SxS_(0ul,i))
	res = false;
 else
	res = false; /* Should be domain error!! */
 return( res);
}

inline bool to_bool( ulonglong i)
{ 
 if ( _eq_SxS_(1ull,i) )
	res = true;
 else if ( _eq_SxS_(0ull,i))
	res = false;
 else
	res = false; /* Should be domain error!! */
 return( res);
}

inline bool to_bool( float8 i)
{ 
 if ( _eq_SxS_(1f8,i) )
  res = true;
 else if ( _eq_SxS_(0f8,i))
  res = false;
 else
  res = false; /* Should be domain error!! */
 return( res);
}

inline bool to_bool( float16 i)
{ 
 if ( _eq_SxS_(1f16,i) )
  res = true;
 else if ( _eq_SxS_(0f16,i))
  res = false;
 else
  res = false; /* Should be domain error!! */
 return( res);
}
	
inline bool to_bool( float i)
{ 
 if ( _eq_SxS_(1f,i) )
	res = true;
 else if ( _eq_SxS_(0f,i))
	res = false;
 else
	res = false; /* Should be domain error!! */
 return( res);
}

inline bool to_bool( double i)
{ 
 if ( _eq_SxS_(1.0,i) )
	res = true;
 else if ( _eq_SxS_(0.0,i))
	res = false;
 else
	res = false; /* Should be domain error!! */
 return( res);
}


