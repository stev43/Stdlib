module Math;

use ScalarArith: all;
export all;

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

  /* Trigonometric functions.  */


external double cos(double X);
    #pragma linksign [0,1]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
#ifdef NEED_LIBM
    #pragma linkwith "m"
#endif
    /* Cosine of X.  */

external double sin(double X);
    #pragma linksign [0,1]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Sine of X.  */

external double tan(double X);
    #pragma linksign [0,1]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Tangent of X.  */

external double acos(double X);
    #pragma linksign [0,1]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Arc cosine of X.  */

external double asin(double X);
    #pragma linksign [0,1]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Arc sine of X.  */

external double atan(double X);
    #pragma linksign [0,1]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Arc tangent of X.  */
    
external double atan2(double X, double Y);
    #pragma linksign [0,1,2]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Arc tangent of Y/X.  */



  /* Hyperbolic functions.  */


external double cosh(double X);
    #pragma linksign [0,1]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Hyperbolic cosine of X.  */

external double sinh(double X);
    #pragma linksign [0,1]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Hyperbolic sine of X.  */

external double tanh(double X);
    #pragma linksign [0,1]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Hyperbolic tangent of X.  */

external double acosh(double X);
    #pragma linksign [0,1]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Hyperbolic arc cosine of X.  */

external double asinh(double X);
    #pragma linksign [0,1]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Hyperbolic arc sine of X.  */

external double atanh(double X);
    #pragma linksign [0,1]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Hyperbolic arc tangent of X.  */
    


  /* Exponential and logarithmic functions.  */


external double exp(double X);
    #pragma linksign [0,1]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Exponentional function of X.  */

external float expf(float X);
    #pragma linksign [0,1]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Exponentional function of X.  */

external double, int frexp(double X);
    #pragma linksign [0,2,1]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Break X into a normalized fraction and an integral power of 2.  */

external double ldexp(double X, int EXP);
    #pragma linksign [0,1,2]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* X times (two to the EXP power).  */

external double log(double X);
    #pragma linksign [0,1]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Natural logarithm of X.  */

external double log10(double X);
    #pragma linksign [0,1]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Base-ten logarithm of X.  */

external double log2(double X);
    #pragma linksign [0,1]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Base-two logarithm of X.  */

external double expm1(double X);
    #pragma linksign [0,1]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Return exp(X) - 1.  */

external double log1p(double X);
    #pragma linksign [0,1]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Return log(1 + X).  */

external double, double modf(double X);
    #pragma linksign [0,2,1]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Break VALUE into integral and fractional parts.  */



  /* Power functions.  */


external double pow(double X, double Y);
    #pragma linksign [0,1,2]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Return X to the Y power.  */

external float powf(float X, float Y);
    #pragma linksign [0,1,2]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Return X to the Y power.  */

external double sqrt(double X);
    #pragma linksign [0,1]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Return the square root of X.  */

external float sqrtf(float X);
    #pragma linksign [0,1]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Return the square root of X.  */

external double cbrt(double X);
    #pragma linksign [0,1]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Return the cube root of X.  */



  /* Nearest integer, absolute value, and remainder functions.  */


external double ceil(double X);
    #pragma linksign [0,1]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Smallest integral value not less than X.  */

external double fabs(double X);
    #pragma linksign [0,1]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Absolute value of X.  */

external double floor(double X);
    #pragma linksign [0,1]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Largest integer not greater than X.  */

external double fmod(double X, double Y);
    #pragma linksign [0,1,2]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Floating-point modulo remainder of X/Y.  */



  /* Range testing functions  */


external bool isinf(double X);
    #pragma linksign [0,1]
    #pragma linkobj "src/Math/isinf.o"
    #pragma linkname "SAC_MATH_isinf"
    /* Check X for infinity.  */
  
external bool isnan(double X);
    #pragma linksign [0,1]
    #pragma linkobj "src/Math/isnan.o"
    #pragma linkname "SAC_MATH_isnan"
    /* Check X for being NaN (not a number).  */

external bool finite(double X);
    #pragma linksign [0,1]
    #pragma linkobj "src/Math/isfinite.o"
    #pragma linkname "SAC_MATH_isfinite"
    /* Check X for being finite and not NaN.  */



  /* Miscellaneous  */

external double copysign(double X, double Y);
    #pragma linksign [0,1,2]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Return X with its signed changed to Y's.  */

external double rint(double X);
    #pragma linksign [0,1]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Return the integer nearest X in the direction of the
       prevailing rounding mode.  */

external double hypot(double X, double Y);
    #pragma linksign [0,1,2]
#ifdef HAVE_HEADER_PRAGMA
    #pragma header "<math.h>"
#endif
    /* Return `sqrt(X*X + Y*Y)'.  */






  /* Trigonometric functions.  */


  inline float cos(float X)
  {
    return(tof(cos(tod(X))));
  }

  inline float8 cos(float8 X)
  {
    return(tof8(cos(tof(X))));
  }

  inline float16 cos(float16 X)
  {
    return(tof16(cos(tof(X))));
  }
    /* Cosine of X.  */

  inline float sin(float X)
  {
    return(tof(sin(tod(X))));
  }

  inline float8 sin(float8 X)
  {
    return(tof8(sin(tof(X))));
  }

  inline float16 sin(float16 X)
  {
    return(tof16(sin(tof(X))));
  }
    /* Sine of X.  */

  inline float, float sincos(float x)
  {
    return(sin(x), cos(x));
  }

  inline float8, float8 sincos(float8 x)
  {
    a,b = sincos(tof(x));
    return(tof8(a), tof8(b));
  }

  inline float16, float16 sincos(float16 x)
  {
    a,b = sincos(tof(x));
    return(tof16(a), tof16(b));
  }

  inline double, double sincos(double x)
  {
    return(sin(x), cos(x));
  }

  inline float tan(float X)
  {
    return(tof(tan(tod(X))));
  }

  inline float8 tan(float8 X)
  {
    return(tof8(tan(tof(X))));
  }

  inline float16 tan(float16 X)
  {
    return(tof16(tan(tof(X))));
  }
    /* Tangent of X.  */

  inline float acos(float X)
  {
    return(tof(acos(tod(X))));
  }

  inline float8 acos(float8 X)
  {
    return(tof8(acos(tof(X))));
  }

  inline float16 acos(float16 X)
  {
    return(tof16(acos(tof(X))));
  }
    /* Arc cosine of X.  */

  inline float asin(float X)
  {
    return(tof(asin(tod(X))));
  }

  inline float8 asin(float8 X)
  {
    return(tof8(asin(tof(X))));
  }

  inline float16 asin(float16 X)
  {
    return(tof16(asin(tof(X))));
  }
    /* Arc sine of X.  */

  inline float atan(float X)
  {
    return(tof(atan(tod(X))));
  }

  inline float8 atan(float8 X)
  {
    return(tof8(atan(tof(X))));
  }

  inline float16 atan(float16 X)
  {
    return(tof16(atan(tof(X))));
  }
    /* Arc tangent of X.  */
    
  inline float atan2(float X, float Y)
  {
    return(tof(atan2(tod(X), tod(Y))));
  }

  inline float8 atan2(float8 X, float8 Y)
  {
    return(tof8(atan2(tof(X), tof(Y))));
  }

  inline float16 atan2(float16 X, float16 Y)
  {
    return(tof16(atan2(tof(X), tof(Y))));
  }
    /* Arc tangent of Y/X.  */



  /* Hyperbolic functions.  */


  inline float cosh(float X)
  {
    return(tof(cosh(tod(X))));
  }

  inline float8 cosh(float8 X)
  {
    return(tof8(cosh(tof(X))));
  }

  inline float16 cosh(float16 X)
  {
    return(tof16(cosh(tof(X))));
  }
    /* Hyperbolic cosine of X.  */

  inline float sinh(float X)
  {
    return(tof(sinh(tod(X))));
  }

  inline float8 sinh(float8 X)
  {
    return(tof8(sinh(tof(X))));
  }
  
  inline float16 sinh(float16 X)
  {
    return(tof16(sinh(tof(X))));
  }
    /* Hyperbolic sine of X.  */

  inline float tanh(float X)
  {
    return(tof(tanh(tod(X))));
  }

  inline float8 tanh(float8 X)
  {
    return(tof8(tanh(tof(X))));
  }

  inline float16 tanh(float16 X)
  {
    return(tof16(tanh(tof(X))));
  }
    /* Hyperbolic tangent of X.  */

  inline float acosh(float X)
  {
    return(tof(acosh(tod(X))));
  }

  inline float8 acosh(float8 X)
  {
    return(tof8(acosh(tof(X))));
  }

  inline float16 acosh(float16 X)
  {
    return(tof16(acosh(tof(X))));
  }
    /* Hyperbolic arc cosine of X.  */

  inline float asinh(float X)
  {
    return(tof(asinh(tod(X))));
  }

  inline float8 asinh(float8 X)
  {
    return(tof8(asinh(tof(X))));
  }

  inline float16 asinh(float16 X)
  {
    return(tof16(asinh(tof(X))));
  }
    /* Hyperbolic arc sine of X.  */

  inline float atanh(float X)
  {
    return(tof(atanh(tod(X))));
  }

  inline float8 atanh(float8 X)
  {
    return(tof8(atanh(tof(X))));
  }

  inline float16 atanh(float16 X)
  {
    return(tof16(atanh(tof(X))));
  }
    /* Hyperbolic arc tangent of X.  */
    


  /* Exponential and logarithmic functions.  */


  inline float exp(float X)
  {
    return(expf(X));
  }

  inline float8 exp(float8 X)
  {
    return(tof8(exp(tof(X))));
  }

  inline float16 exp(float16 X)
  {
    return(tof16(exp(tof(X))));
  }
    /* Exponentional function of X.  */

  inline float, int frexp(float X)
  {
    a, b=frexp(tod(X));

    return(tof(a), b);
  }

  inline float8, int frexp(float8 X)
  {
    a, b=frexp(tof(X));

    return(tof8(a), b);
  }

  inline float16, int frexp(float16 X)
  {
    a, b=frexp(tof(X));

    return(tof16(a), b);
  }
    /* Break X into a normalized fraction and an integral power of 2.  */

  inline float ldexp(float X, int EXP)
  {
    return(tof(ldexp(tod(X), EXP)));
  }

  inline float8 ldexp(float8 X, int EXP)
  {
    return(tof8(ldexp(tof(X), EXP)));
  }

  inline float16 ldexp(float16 X, int EXP)
  {
    return(tof16(ldexp(tof(X), EXP)));
  }
    /* X times (two to the EXP power).  */

  inline float log(float X)
  {
    return(tof(log(tod(X))));
  }

  inline float8 log(float8 X)
  {
    return(tof8(log(tof(X))));
  }

  inline float16 log(float16 X)
  {
    return(tof16(log(tof(X))));
  }
    /* Natural logarithm of X.  */

  inline float log10(float X)
  {
    return(tof(log10(tod(X))));
  }

  inline float8 log10(float8 X)
  {
    return(tof8(log10(tof(X))));
  }

  inline float16 log10(float16 X)
  {
    return(tof16(log10(tof(X))));
  }
    /* Base-ten logarithm of X.  */

  inline float log2(float X)
  {
    return(tof(log2(tod(X))));
  }

  inline float8 log2(float8 X)
  {
    return(tof8(log2(tof(X))));
  }

  inline float16 log2(float16 X)
  {
    return(tof16(log2(tof(X))));
  }
    /* Base-two logarithm of X.  */

  inline float expm1(float X)
  {
    return(tof(expm1(tod(X))));
  }

  inline float8 expm1(float8 X)
  {
    return(tof8(expm1(tof(X))));
  }

  inline float16 expm1(float16 X)
  {
    return(tof16(expm1(tof(X))));
  }
    /* Return exp(X) - 1.  */

  inline float log1p(float X)
  {
    return(tof(log1p(tod(X))));
  }

  inline float8 log1p(float8 X)
  {
    return(tof8(log1p(tof(X))));
  }

  inline float16 log1p(float16 X)
  {
    return(tof16(log1p(tof(X))));
  }
    /* Return log(1 + X).  */

  inline float, float modf(float X)
  {
    a, b = modf(tod(X));
    return(tof(a), tof(b));
  }

  inline float8, float8 modf(float8 X)
  {
    a, b = modf(tof(X));
    return(tof8(a), tof8(b));
  }

  inline float16, float16 modf(float16 X)
  {
    a, b = modf(tof(X));
    return(tof16(a), tof16(b));
  }
    /* Break VALUE into integral and fractional parts.  */



  /* Power functions.  */


  inline float pow(float X, float Y)
  {
    return(powf(X, Y));
  }

  inline float8 pow(float8 X, float8 Y)
  {
    return(tof8(powf(tof(X), tof(Y))));
  }

  inline float16 pow(float16 X, float16 Y)
  {
    return(tof16(powf(tof(X), tof(Y))));
  }
    /* Return X to the Y power.  */

  inline float sqrt(float X)
  {
    return(sqrtf(X));
  }

  inline float8 sqrt(float8 X)
  {
    return(tof8(sqrtf(tof(X))));
  }

  inline float16 sqrt(float16 X)
  {
    return(tof16(sqrtf(tof(X))));
  }
    /* Return the square root of X.  */

  inline float cbrt(float X)
  {
    return(tof(cbrt(tod(X))));
  }

  inline float8 cbrt(float8 X)
  {
    return(tof8(cbrt(tof(X))));
  }

  inline float16 cbrt(float16 X)
  {
    return(tof16(cbrt(tof(X))));
  }
    /* Return the cube root of X.  */



  /* Nearest integer, absolute value, and remainder functions.  */


  inline float ceil(float X)
  {
    return(tof(ceil(tod(X))));
  }

  inline float8 ceil(float8 X)
  {
    return(tof8(ceil(tof(X))));
  }

  inline float16 ceil(float16 X)
  {
    return(tof16(ceil(tof(X))));
  }
    /* Smallest integral value not less than X.  */

  inline float fabs(float X)
  {
    return(tof(fabs(tod(X))));
  }

  inline float8 fabs(float8 X)
  {
    return(tof8(fabs(tof(X))));
  }

  inline float16 fabs(float16 X)
  {
    return(tof16(fabs(tof(X))));
  }
    /* Absolute value of X.  */

  inline float floor(float X)
  {
    return(tof(floor(tod(X))));
  }

  inline float8 floor(float8 X)
  {
    return(tof8(floor(tof(X))));
  }

  inline float16 floor(float16 X)
  {
    return(tof16(floor(tof(X))));
  }
    /* Largest integer not greater than X.  */

  inline float fmod(float X, float Y)
  {
    return(tof(fmod(tod(X), tod(Y))));
  }

  inline float8 fmod(float8 X, float8 Y)
  {
    return(tof8(fmod(tof(X), tof(Y))));
  }

  inline float16 fmod(float16 X, float16 Y)
  {
    return(tof16(fmod(tof(X), tof(Y))));
  }
    /* Floating-point modulo remainder of X/Y.  */




  /* Miscellaneous  */

  inline float copysign(float X, float Y)
  {
    return(tof(copysign(tod(X), tod(Y))));
  }

  inline float8 copysign(float8 X, float8 Y)
  {
    return(tof8(copysign(tof(X), tof(Y))));
  }

  inline float16 copysign(float16 X, float16 Y)
  {
    return(tof16(copysign(tof(X), tof(Y))));
  }
    /* Return X with its signed changed to Y's.  */

  inline float rint(float X)
  {
    return(tof(rint(tod(X))));
  }

  inline float8 rint(float8 X)
  {
    return(tof8(rint(tof(X))));
  }

  inline float16 rint(float16 X)
  {
    return(tof16(rint(tof(X))));
  }
    /* Return the integer nearest X in the direction of the
       prevailing rounding mode.  */

  inline float hypot(float X, float Y)
  {
    return(tof(hypot(tod(X), tod(Y))));
  }

  inline float8 hypot(float8 X, float8 Y)
  {
    return(tof8(hypot(tof(X), tof(Y))));
  }

  inline float16 hypot(float16 X, float16 Y)
  {
    return(tof16(hypot(tof(X), tof(Y))));
  }
    /* Return `sqrt(X*X + Y*Y)'.  */






inline int sign(float8 x)
{
  if (x<0f8)
  {
    res= -1;
  }
  else
  {
    if (x>0f8)
    {
      res=1;
    }
    else
    {
      res=0;
    }
  }

  return(res);
}

inline int sign(float16 x)
{
  if (x<0f16)
  {
    res= -1;
  }
  else
  {
    if (x>0f16)
    {
      res=1;
    }
    else
    {
      res=0;
    }
  }

  return(res);
}

inline int sign(float x)
{
  if (x<0f)
  {
    res= -1;
  }
  else
  {
    if (x>0f)
    {
      res=1;
    }
    else
    {
      res=0;
    }
  }

  return(res);
}


inline int sign(double x)
{
  if (x<0d)
  {
    res= -1;
  }
  else
  {
    if (x>0d)
    {
      res=1;
    }
    else
    {
      res=0;
    }
  }

  return(res);
}



/* Numerical constants */


inline float fl_e()
{
  return(2.7182818284590452354f);       /* e */
}

inline float fl_log2e()
{
  return(1.4426950408889634074f);       /* log 2e */
}

inline float fl_log10e()
{
  return(0.43429448190325182765f);	/* log 10e */
}

inline float fl_ln2()
{
  return(0.69314718055994530942f);	/* log e2 */
}

inline float fl_ln10()
{
  return(2.30258509299404568402f);	/* log e10 */
}

inline float fl_pi()
{
  return(3.14159265358979323846f);	/* pi */
}

inline float fl_pi_2()
{
  return(1.57079632679489661923f);	/* pi/2 */
}

inline float fl_pi_rec()
{
  return(0.31830988618379067154f);	/* 1/pi */
}

inline float fl_pi_4()
{
  return(0.78539816339744830962f);	/* pi/4 */
}

inline float fl_pi_rec_2()
{
  return(0.63661977236758134308f);	/* 2/pi */
}

inline float fl_sqrtpi_rec_2()
{
  return(1.12837916709551257390f);	/* 2/sqrt(pi) */
}

inline float fl_sqrt2()
{
  return(1.41421356237309504880f);	/* sqrt(2) */
}

inline float fl_sqrt2_rec()
{
  return(0.7071067811865475244f);	/* 1/sqrt(2) */
}









inline double e()
{
  return(2.7182818284590452354d);       /* e */
}

inline double log2e()
{
  return(1.4426950408889634074d);       /* log 2e */
}

inline double log10e()
{
  return(0.43429448190325182765d);	/* log 10e */
}

inline double ln2()
{
  return(0.69314718055994530942d);	/* log e2 */
}

inline double ln10()
{
  return(2.30258509299404568402d);	/* log e10 */
}

inline double pi()
{
  return(3.14159265358979323846d);	/* pi */
}

inline double pi_2()
{
  return(1.57079632679489661923d);	/* pi/2 */
}

inline double pi_rec()
{
  return(0.31830988618379067154d);	/* 1/pi */
}

inline double pi_4()
{
  return(0.78539816339744830962d);	/* pi/4 */
}

inline double pi_rec_2()
{
  return(0.63661977236758134308d);	/* 2/pi */
}

inline double sqrtpi_rec_2()
{
  return(1.12837916709551257390d);	/* 2/sqrt(pi) */
}

inline double sqrt2()
{
  return(1.41421356237309504880d);	/* sqrt(2) */
}

inline double sqrt2_rec()
{
  return(0.7071067811865475244d);	/* 1/sqrt(2) */
}



